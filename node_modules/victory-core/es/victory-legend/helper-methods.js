import _sumBy from "lodash/sumBy";
import _maxBy from "lodash/maxBy";
import _assign from "lodash/assign";
import _defaults from "lodash/defaults";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import Helpers from "../victory-util/helpers";
import Style from "../victory-util/style";
import TextSize from "../victory-util/textsize";

var calculateLegendHeight = function (props, textSizes) {
  var gutter = props.gutter,
      itemsPerRow = props.itemsPerRow,
      padding = props.padding,
      isHorizontal = props.isHorizontal;

  var itemCount = textSizes.length;
  var rowCount = itemsPerRow ? Math.ceil(itemCount / itemsPerRow) : 1;
  var contentHeight = isHorizontal ? _maxBy(textSizes, "height").height * rowCount + gutter * (rowCount - 1) : (_sumBy(textSizes, "height") + gutter * (itemCount - 1)) / rowCount;

  return padding.top + contentHeight + padding.bottom;
};

var calculateLegendWidth = function (props, itemCount, maxTextWidth) {
  var gutter = props.gutter,
      itemsPerRow = props.itemsPerRow,
      symbolSpacer = props.symbolSpacer,
      padding = props.padding,
      isHorizontal = props.isHorizontal;

  var rowCount = itemsPerRow ? Math.ceil(itemCount / itemsPerRow) : 1;
  var rowItemCount = itemsPerRow || itemCount;
  var contentWidth = void 0;

  if (isHorizontal) {
    var gutterWidth = gutter * rowItemCount;
    var symbolWidth = symbolSpacer * 3 * rowItemCount; // eslint-disable-line no-magic-numbers
    var textWidth = maxTextWidth * rowItemCount;
    contentWidth = symbolWidth + textWidth + gutterWidth;
  } else {
    contentWidth = (maxTextWidth + symbolSpacer * 2 + gutter) * rowCount;
  }

  return padding.left + contentWidth + padding.right;
};

var getColorScale = function (props) {
  var colorScale = props.colorScale;

  return typeof colorScale === "string" ? Style.getColorScale(colorScale) : colorScale || [];
};

var getLabelStyles = function (props) {
  var data = props.data,
      style = props.style;

  return data.map(function (datum) {
    var baseLabelStyles = _defaults({}, datum.labels, style.labels);
    return Helpers.evaluateStyle(baseLabelStyles, datum);
  });
};

var getTextSizes = function (props, labelStyles) {
  return props.data.map(function (datum, i) {
    return TextSize.approximateTextSize(datum.name, labelStyles[i]);
  });
};

var getCalculatedValues = function (props) {
  var orientation = props.orientation,
      theme = props.theme;

  var defaultStyles = theme && theme.legend && theme.legend.style ? theme.legend.style : {};
  var style = Helpers.getStyles(props.style, defaultStyles);
  var colorScale = getColorScale(props);
  var isHorizontal = orientation === "horizontal";
  var padding = Helpers.getPadding(props);

  return _assign({}, props, { style: style, isHorizontal: isHorizontal, colorScale: colorScale, padding: padding });
};

var getSymbolSize = function (datum, fontSize) {
  // eslint-disable-next-line no-magic-numbers
  return datum.symbol && datum.symbol.size ? datum.symbol.size : fontSize / 2.5;
};

export default (function (props, fallbackProps) {
  var modifiedProps = Helpers.modifyProps(props, fallbackProps, "legend");
  props = _assign({}, modifiedProps, getCalculatedValues(modifiedProps));
  var _props = props,
      data = _props.data,
      standalone = _props.standalone,
      theme = _props.theme,
      padding = _props.padding,
      style = _props.style,
      colorScale = _props.colorScale,
      itemsPerRow = _props.itemsPerRow,
      gutter = _props.gutter,
      isHorizontal = _props.isHorizontal,
      symbolSpacer = _props.symbolSpacer;

  var labelStyles = getLabelStyles(props);
  var textSizes = getTextSizes(props, labelStyles);
  var maxTextWidth = Math.max.apply(Math, _toConsumableArray(textSizes.map(function (text) {
    return text.width;
  })));
  var height = props.height || calculateLegendHeight(props, textSizes);
  var width = props.width || calculateLegendWidth(props, textSizes.width, maxTextWidth);
  var initialChildProps = { parent: {
      width: width, height: height, data: data, standalone: standalone, theme: theme, padding: padding, style: style.parent
    } };

  return data.reduce(function (childProps, datum, i) {
    var fontSize = labelStyles[i].fontSize;

    var symbolShift = fontSize / 2;
    var symbolWidth = fontSize + symbolSpacer;
    var rowHeight = fontSize + gutter;
    var itemIndex = itemsPerRow ? i % itemsPerRow : i;
    var rowIndex = itemsPerRow ? Math.floor(i / itemsPerRow) : 0;
    var rowSpacer = itemsPerRow ? rowHeight * rowIndex : 0;
    var eventKey = datum.eventKey || i;
    var y = isHorizontal ? padding.top + symbolShift + rowSpacer : padding.top + symbolShift + rowHeight * itemIndex;
    var color = colorScale[i % colorScale.length];
    var dataStyle = _defaults({}, datum.symbol, style.data, { fill: color });

    var dataProps = {
      index: i,
      data: data, datum: datum,
      key: "legend-symbol-" + i,
      symbol: dataStyle.type || "circle",
      size: getSymbolSize(datum, fontSize),
      style: dataStyle,
      y: y,
      x: isHorizontal ? padding.left + symbolShift + (fontSize + symbolSpacer + maxTextWidth + gutter) * itemIndex : padding.left + symbolShift + (rowHeight + maxTextWidth) * rowIndex
    };

    var labelProps = {
      datum: datum, data: data,
      key: "legend-label-" + i,
      text: datum.name,
      style: labelStyles[i],
      y: y,
      x: isHorizontal ? padding.left + symbolWidth * (itemIndex + 1) + (maxTextWidth + gutter) * itemIndex : padding.left + symbolWidth + (rowHeight + maxTextWidth) * rowIndex
    };

    childProps[eventKey] = { data: dataProps, labels: labelProps };

    return childProps;
  }, initialChildProps);
});